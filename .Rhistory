lyrics <- foreach(i = 1:nrow(test_sample), .combine = "rbind", .errorhandling = "remove") %do% {
song_tmp <- test_sample[i,]
lyrics_tmp <- get_lyrics_search(artist_name = song_tmp$track.artist,
song_title = song_tmp$track.name) %>%
select(line) %>%
reduce(line) %>%
paste0(collapse = "\n ")
tokens <- tibble(tokens = tokenize_words(lyrics_tmp, simplify = TRUE)) %>%
nest()
n_words <- unnest(tokens) %>%
nrow()
sentiment <- tokens %>% unnest(data)  %>%
rename(word = tokens) %>%
inner_join(filter(get_sentiments("nrc"),  sentiment %in% c("positive", "negative")),
by = "word", relationship =  'many-to-many') %>%
group_by(sentiment) %>%
count() %>%
pivot_wider(names_from = sentiment, values_from = n) %>%
mutate(total = negative + positive,
sentiment = positive/total)
output <- tibble(track.artist=song_tmp$track.artist,
track.name = song_tmp$track.name,
lyrics = lyrics_tmp,
tokens = tokens$data,
n_words =  n_words) %>%
cbind(sentiment)
print(i/nrow(test_sample))
return(output)
}
warnings()
saveRDS(lyrics, "rawdata/sample_lyrics.RDS")
lyrics_unique <- distinct(lyrics)
View(lyrics)
final <- test_sample %>%
left_join(lyrics_unique, by = c("track.artist", "track.name"))%>%
drop_na(sentiment) %>%
mutate(track.duration_min = track.duration_ms/60000,
words_per_minute = n_words/track.duration_min)
ggplot(final, aes(x = category, y = words_per_minute)) + geom_boxplot()
final %>%
group_by(category)  %>%
count()
ggplot(final, aes(x = category, y = sentiment)) + geom_boxplot()
ggplot(final, aes(x = category, y = words_per_minute)) + geom_boxplot()
ggplot(final, aes(x = category, y = n_words)) + geom_boxplot()
ggplot(final, aes(x = category, y = words_per_minute)) + geom_boxplot()
hist(final$sentiment)
View(final)
hist(final$words_per_minute)
saveRDS(final, "rawdata/rap_genre_example.RDS")
git status
saveRDS(final, "cleandata/rap_genre_example.RDS")
final %>%
group_by(category)  %>%
count()
saveRDS(final, "cleandata/example_lyrics.RDS")
rap <- final %>%
filter(category == "Hip-Hop")
others <- final %>%
filter(category != "Hip-Hop")
ggplot(final, aes(x = category, y = words_per_minute)) + geom_boxplot()
others <- final %>%
filter(category %in% c("Rock", "Megal", "Pop", "Indie")) %>%
slice_sample(n = 48)
others <- final %>%
filter(category %in% c("Rock", "Megal", "Pop", "Indie")) %>%
slice_sample(n = 50)
others <- final %>%
filter(category %in% c("Rock", "Megal", "Pop", "Indie")) %>%
slice_sample(n = 50) %>%
mutate(category = "Other")
saveRDS(rbind(rap, others), "cleandata/rap_genre_example.RDS")
ggplot(rbind(rap, others), aes(x = category, y = words_per_minute)) + geom_boxplot()
category_songs %>% distinct(track.artist, track.name)
category_songs %>% distinct(track.artist, track.name) %>%  nrow()
saveRDS(rbind(rap, others), "cleandata/rap_genre_example.RDS")
rap <- final %>%
filter(category == "Hip-Hop")
rap <- final %>%
filter(category == "Hip-Hop")
others <- final %>%
filter(category %in% c("Rock", "Metal", "Pop", "Indie")) %>%
slice_sample(n = 50)
saveRDS(rbind(rap, others), "cleandata/rap_genre_example.RDS")
rap <- final %>%
filter(category == "Hip-Hop")
others <- final %>%
filter(category %in% c("Rock", "Metal", "Pop", "Indie"))
saveRDS(rbind(rap, others), "cleandata/rap_genre_example.RDS")
rap <- final %>%
filter(category == "Hip-Hop")
others <- final %>%
filter(category %in% c("Rock", "Metal", "Pop", "Indie")) %>%
slice_sample(n = 50)
others <- final %>%
filter(category %in% c("Rock", "Metal", "Pop", "Indie")) %>%
slice_sample(n = 52)
others <- final %>%
filter(category %in% c("Rock", "Metal", "Pop", "Indie")) %>%
slice_sample(n = 52)
saveRDS(rbind(rap, others), "cleandata/rap_genre_example.RDS")
saveRDS(category_songs, "rawdata/small_sample.RDS")
library(tidyverse)
library(spotifyr)
library(foreach)
readRenviron(".Renviron")
auth_object <- get_spotify_authorization_code(scope = scopes()[c(7,8,9,10,14,15)])
categories <- get_categories()
cats <- c("Pop", "Hip-Hop",  "Metal", "Indie", "Rock", "Dance/Electronic", "Alternative", "Rock", "Party")
category_ids <- categories %>%
filter(name %in% cats) %>%
pull(id)
category_playlists <- foreach(id = category_ids, .combine = "rbind") %do% {
tmp <- get_category_playlists(category_id = id, limit = 20, country = "DE", include_meta_info = FALSE)
tmp$category_id = id
tmp
}
playlists <- categories %>%
select(id, name) %>%
rename(category = name,
category_id = id) %>%
right_join(category_playlists, by = "category_id") %>%
filter(tracks.total <= 100)
playlist_ids <- playlists %>%
pull(id)
category_songs <- foreach(i = playlist_ids, .combine = "rbind", .errorhandling = "remove") %do% {
out <- get_playlist_tracks(playlist_id = i)
title <- playlists %>%
filter(id == i) %>%
distinct(category) %>%
pull()
out <- out %>%
filter(!is.na(track.id)) %>%
# separate out the df column artists
unnest(cols = 'track.artists') %>%
group_by(track.id) %>%
mutate(row_number = 1:n(),
track.artist = name,
track.artist.id = id) %>%
ungroup() %>%
filter(row_number == 1) %>%
select(track.id, track.name, track.artist, track.artist.id, track.popularity, track.album.id, track.album.name, track.album.release_date, track.duration_ms, track.explicit) %>%
mutate(playlist.id = i,
category = title)
Sys.sleep(1)
out
}
saveRDS(category_songs, "rawdata/small_sample.RDS")
category_songs <- readRDS("rawdata/small_sample.RDS") %>%
distinct()
category_songs <- readRDS("rawdata/small_sample.RDS") %>%
distinct()
category_songs %>%
summarise(n = n(), .by = category)
test_sample <- slice_sample(category_songs, n = 100, by = category ) %>%
select(track.name, track.artist, category, track.duration_ms)
test_sample <- category_songs %>%
select(track.name, track.artist, category, track.duration_ms)
test_sample_songs <-
test_sample %>%
distinct(track.name, track.artist)
library(foreach)
lyrics <- foreach(i = 1:nrow(test_sample_songs), .combine = "rbind", .errorhandling = "remove") %do% {
song_tmp <- test_sample_songs[i,]
lyrics_tmp <- get_lyrics_search(artist_name = song_tmp$track.artist,
song_title = song_tmp$track.name) %>%
select(line) %>%
reduce(line) %>%
paste0(collapse = "\n ")
tokens <- tibble(tokens = tokenize_words(lyrics_tmp, simplify = TRUE)) %>%
nest()
n_words <- unnest(tokens) %>%
nrow()
sentiment <- tokens %>% unnest(data)  %>%
rename(word = tokens) %>%
inner_join(filter(get_sentiments("nrc"),  sentiment %in% c("positive", "negative")),
by = "word", relationship =  'many-to-many') %>%
group_by(sentiment) %>%
count() %>%
pivot_wider(names_from = sentiment, values_from = n) %>%
mutate(total = negative + positive,
sentiment = positive/total)
output <- tibble(track.artist=song_tmp$track.artist,
track.name = song_tmp$track.name,
lyrics = lyrics_tmp,
tokens = tokens$data,
n_words =  n_words) %>%
cbind(sentiment)
print(i/nrow(test_sample))
Sys.sleep(0.5)
return(output)
}
warnings()
n_words <- unnest(cols(tokens)) %>%
nrow()
n_words <- unnest(cols = c(tokens)) %>%
nrow()
tokens <- tibble(tokens = tokenize_words(lyrics_tmp, simplify = TRUE)) %>%
nest()
n_words <- unnest(cols = c(tokens)) %>%
nrow()
View(category_songs)
category_playlists <- foreach(id = category_ids, .combine = "rbind") %do% {
tmp <- get_category_playlists(category_id = id, limit = 5, country = "DE", include_meta_info = FALSE)
tmp$category_id = id
tmp
}
library(tidyverse)
library(spotifyr)
library(foreach)
readRenviron(".Renviron")
auth_object <- get_spotify_authorization_code(scope = scopes()[c(7,8,9,10,14,15)])
categories <- get_categories()
cats <- c("Pop", "Hip-Hop",  "Metal", "Indie", "Rock", "Dance/Electronic", "Alternative", "Rock", "Party")
category_ids <- categories %>%
filter(name %in% cats) %>%
pull(id)
category_playlists <- foreach(id = category_ids, .combine = "rbind") %do% {
tmp <- get_category_playlists(category_id = id, limit = 5, country = "DE", include_meta_info = FALSE)
tmp$category_id = id
tmp
}
playlists <- categories %>%
select(id, name) %>%
rename(category = name,
category_id = id) %>%
right_join(category_playlists, by = "category_id") %>%
filter(tracks.total <= 100)
playlist_ids <- playlists %>%
pull(id)
category_songs <- foreach(i = playlist_ids, .combine = "rbind", .errorhandling = "remove") %do% {
out <- get_playlist_tracks(playlist_id = i)
title <- playlists %>%
filter(id == i) %>%
distinct(category) %>%
pull()
out <- out %>%
filter(!is.na(track.id)) %>%
# separate out the df column artists
unnest(cols = 'track.artists') %>%
group_by(track.id) %>%
mutate(row_number = 1:n(),
track.artist = name,
track.artist.id = id) %>%
ungroup() %>%
filter(row_number == 1) %>%
select(track.id, track.name, track.artist, track.artist.id, track.popularity, track.album.id, track.album.name, track.album.release_date, track.duration_ms, track.explicit) %>%
mutate(playlist.id = i,
category = title)
Sys.sleep(1)
out
}
saveRDS(category_songs, "rawdata/small_sample.RDS")
readRenviron(".Renviron")
library(tidyverse)
library(tidytext)
library(tidymodels)
# the CRAN version of the package is not working properly
#remotes::install_github("https://github.com/giovanni-cutri/geniusr")
library(geniusr)
library(tokenizers)
category_songs <- readRDS("rawdata/small_sample.RDS") %>%
distinct()
category_songs %>%
summarise(n = n(), .by = category)
test_sample <- category_songs %>%
select(track.name, track.artist, category, track.duration_ms)
test_sample_songs <-
test_sample %>%
distinct(track.name, track.artist)
library(foreach)
lyrics <- foreach(i = 1:nrow(test_sample_songs), .combine = "rbind", .errorhandling = "remove") %do% {
song_tmp <- test_sample_songs[i,]
lyrics_tmp <- get_lyrics_search(artist_name = song_tmp$track.artist,
song_title = song_tmp$track.name) %>%
select(line) %>%
reduce(line) %>%
paste0(collapse = "\n ")
tokens <- tibble(tokens = tokenize_words(lyrics_tmp, simplify = TRUE)) %>%
nest()
n_words <- unnest(cols = c(tokens)) %>%
nrow()
sentiment <- tokens %>% unnest(data)  %>%
rename(word = tokens) %>%
inner_join(filter(get_sentiments("nrc"),  sentiment %in% c("positive", "negative")),
by = "word", relationship =  'many-to-many') %>%
group_by(sentiment) %>%
count() %>%
pivot_wider(names_from = sentiment, values_from = n) %>%
mutate(total = negative + positive,
sentiment = positive/total)
output <- tibble(track.artist=song_tmp$track.artist,
track.name = song_tmp$track.name,
lyrics = lyrics_tmp,
tokens = tokens$data,
n_words =  n_words) %>%
cbind(sentiment)
print(i/nrow(test_sample))
#Sys.sleep(0.5)
return(output)
}
song_tmp <- test_sample_songs[i,]
lyrics_tmp <- get_lyrics_search(artist_name = song_tmp$track.artist,
song_title = song_tmp$track.name) %>%
select(line) %>%
reduce(line) %>%
paste0(collapse = "\n ")
tokens <- tibble(tokens = tokenize_words(lyrics_tmp, simplify = TRUE)) %>%
nest()
n_words <- unnest(cols = c(tokens)) %>%
nrow()
?unnest
tokens <- tibble(tokens = tokenize_words(lyrics_tmp, simplify = TRUE)) %>%
nest()
n_words <- unnest(tokens) %>%
nrow()
n_words <- unnest(cols = tokens) %>%
nrow()
n_words <- unnest(tokens, cols = tokens) %>%
nrow()
n_words <- unnest(tokens, cols = c(tokens)) %>%
nrow()
n_words <- unnest(tokens, cols = c(data)) %>%
nrow()
library(tidyverse)
library(spotifyr)
library(foreach)
readRenviron(".Renviron")
auth_object <- get_spotify_authorization_code(scope = scopes()[c(7,8,9,10,14,15)])
categories <- get_categories()
cats <- c("Pop", "Hip-Hop",  "Metal", "Indie", "Rock", "Dance/Electronic", "Alternative", "Rock", "Party")
category_ids <- categories %>%
filter(name %in% cats) %>%
pull(id)
category_playlists <- foreach(id = category_ids, .combine = "rbind") %do% {
tmp <- get_category_playlists(category_id = id, limit = 20, country = "DE", include_meta_info = FALSE)
tmp$category_id = id
tmp
}
playlists <- categories %>%
select(id, name) %>%
rename(category = name,
category_id = id) %>%
right_join(category_playlists, by = "category_id") %>%
filter(tracks.total <= 100)
playlist_ids <- playlists %>%
pull(id)
category_songs <- foreach(i = playlist_ids, .combine = "rbind", .errorhandling = "remove") %do% {
out <- get_playlist_tracks(playlist_id = i)
title <- playlists %>%
filter(id == i) %>%
distinct(category) %>%
pull()
out <- out %>%
filter(!is.na(track.id)) %>%
# separate out the df column artists
unnest(cols = 'track.artists') %>%
group_by(track.id) %>%
mutate(row_number = 1:n(),
track.artist = name,
track.artist.id = id) %>%
ungroup() %>%
filter(row_number == 1) %>%
select(track.id, track.name, track.artist, track.artist.id, track.popularity, track.album.id, track.album.name, track.album.release_date, track.duration_ms, track.explicit) %>%
mutate(playlist.id = i,
category = title)
Sys.sleep(1)
out
}
library(tidyverse)
library(spotifyr)
library(foreach)
readRenviron(".Renviron")
auth_object <- get_spotify_authorization_code(scope = scopes()[c(7,8,9,10,14,15)])
categories <- get_categories()
cats <- c("Pop", "Hip-Hop",  "Metal", "Indie", "Rock", "Dance/Electronic", "Alternative", "Rock", "Party")
category_ids <- categories %>%
filter(name %in% cats) %>%
pull(id)
category_playlists <- foreach(id = category_ids, .combine = "rbind") %do% {
tmp <- get_category_playlists(category_id = id, limit = 20, country = "DE", include_meta_info = FALSE)
tmp$category_id = id
tmp
}
playlists <- categories %>%
select(id, name) %>%
rename(category = name,
category_id = id) %>%
right_join(category_playlists, by = "category_id") %>%
filter(tracks.total <= 100)
playlist_ids <- playlists %>%
pull(id)
category_songs <- foreach(i = playlist_ids, .combine = "rbind", .errorhandling = "remove") %do% {
out <- get_playlist_tracks(playlist_id = i)
title <- playlists %>%
filter(id == i) %>%
distinct(category) %>%
pull()
out <- out %>%
filter(!is.na(track.id)) %>%
# separate out the df column artists
unnest(cols = 'track.artists') %>%
group_by(track.id) %>%
mutate(row_number = 1:n(),
track.artist = name,
track.artist.id = id) %>%
ungroup() %>%
filter(row_number == 1) %>%
select(track.id, track.name, track.artist, track.artist.id, track.popularity, track.album.id, track.album.name, track.album.release_date, track.duration_ms, track.explicit) %>%
mutate(playlist.id = i,
category = title)
Sys.sleep(1)
out
}
saveRDS(category_songs, "rawdata/category_songs.RDS")
readRenviron(".Renviron")
library(tidyverse)
library(tidytext)
library(tidymodels)
# the CRAN version of the package is not working properly
#remotes::install_github("https://github.com/giovanni-cutri/geniusr")
library(geniusr)
library(tokenizers)
category_songs <- readRDS("rawdata/category_songs.RDS") %>%
distinct()
category_songs %>%
summarise(n = n(), .by = category)
test_sample <- category_songs %>%
select(track.name, track.artist, category, track.duration_ms)
test_sample_songs <-
test_sample %>%
distinct(track.name, track.artist)
library(foreach)
lyrics <- foreach(i = 1:nrow(test_sample_songs), .combine = "rbind", .errorhandling = "remove") %do% {
song_tmp <- test_sample_songs[i,]
lyrics_tmp <- get_lyrics_search(artist_name = song_tmp$track.artist,
song_title = song_tmp$track.name) %>%
select(line) %>%
reduce(line) %>%
paste0(collapse = "\n ")
tokens <- tibble(tokens = tokenize_words(lyrics_tmp, simplify = TRUE)) %>%
nest()
n_words <- unnest(tokens, cols = c(data)) %>%
nrow()
sentiment <- tokens %>% unnest(data)  %>%
rename(word = tokens) %>%
inner_join(filter(get_sentiments("nrc"),  sentiment %in% c("positive", "negative")),
by = "word", relationship =  'many-to-many') %>%
group_by(sentiment) %>%
count() %>%
pivot_wider(names_from = sentiment, values_from = n) %>%
mutate(total = negative + positive,
sentiment = positive/total)
output <- tibble(track.artist=song_tmp$track.artist,
track.name = song_tmp$track.name,
lyrics = lyrics_tmp,
tokens = tokens$data,
n_words =  n_words) %>%
cbind(sentiment)
print(i/nrow(test_sample))
Sys.sleep(0.5)
return(output)
}
readRenviron(".Renviron")
library(tidyverse)
library(tidytext)
library(tidymodels)
# the CRAN version of the package is not working properly
#remotes::install_github("https://github.com/giovanni-cutri/geniusr")
library(geniusr)
library(tokenizers)
category_songs <- readRDS("rawdata/category_songs.RDS") %>%
distinct()
category_songs %>%
summarise(n = n(), .by = category)
test_sample <- category_songs %>%
select(track.name, track.artist, category, track.duration_ms)
test_sample_songs <-
test_sample %>%
distinct(track.name, track.artist)
library(foreach)
lyrics <- foreach(i = 1:nrow(test_sample_songs), .combine = "rbind", .errorhandling = "remove") %do% {
song_tmp <- test_sample_songs[i,]
lyrics_tmp <- get_lyrics_search(artist_name = song_tmp$track.artist,
song_title = song_tmp$track.name) %>%
select(line) %>%
reduce(line) %>%
paste0(collapse = "\n ")
tokens <- tibble(tokens = tokenize_words(lyrics_tmp, simplify = TRUE)) %>%
nest()
n_words <- unnest(tokens, cols = c(data)) %>%
nrow()
sentiment <- tokens %>% unnest(data)  %>%
rename(word = tokens) %>%
inner_join(filter(get_sentiments("nrc"),  sentiment %in% c("positive", "negative")),
by = "word", relationship =  'many-to-many') %>%
group_by(sentiment) %>%
count() %>%
pivot_wider(names_from = sentiment, values_from = n) %>%
mutate(total = negative + positive,
sentiment = positive/total)
output <- tibble(track.artist=song_tmp$track.artist,
track.name = song_tmp$track.name,
lyrics = lyrics_tmp,
tokens = tokens$data,
n_words =  n_words) %>%
cbind(sentiment)
print(i/nrow(test_sample))
Sys.sleep(0.5)
return(output)
}
View(category_songs)
